import socket
import time
import os
import sys
# ---------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------


# Function to show files on server
def ServerList():
    """
    Function to show files present in server
    """
    print("Sending ACK signal for file list command")
    message = "VALID"
    encodedMessage = message.encode('utf-8')
    s.sendto(encodedMessage, clientAddr)
    print("Sending list of files on server")

    serverDirectory = os.listdir(path="/Users/stivengjinaj/PycharmProjects/Server-client/venv/server")

    List = []
    for file in serverDirectory:
        List.append(file)
    stringList = str(List)
    encodedList = stringList.encode('utf-8')
    s.sendto(encodedList, clientAddr)
    print("List sent from Server")


# ---------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------


# Function to exit the program

def ServerExit():
    """"

    Function to exit from program
    """
    print("Exiting. Closing socket!")
    s.close()
    sys.exit()


# ---------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------


# Function to get a file from server. Argument "fileToGet" is the file to get from server

def Serverdownload(fileToGet):
    """

    The function gets a file from server and sends it to client. Firstly informs
    client that the request to get the file is valid, then checks the existence of
    the file. If file exists it will send a message to client. The client will start
    to receive. The server will calculate the size of the file and the number of packets
    to send to client and will start the transfer. The process will indicate the packet
    index

    :param fileToGet: type: file,
            The name of file to get from server
    """

    print("Sending ACK signal to get files.")
    message = "VALID"
    encodedMessage = message.encode('utf-8')
    s.sendto(encodedMessage, clientAddr)

    print("Checking if file exists and getting file")

    if os.path.isfile(fileToGet):
        message = "File exists."
        encodedMessage = message.encode('utf-8')
        s.sendto(encodedMessage, clientAddr)

        count = 0
        fileSize = os.stat(fileToGet)
        sizePackets = fileSize.st_size
        print("File size in bytes:" + str(fileSize))
        # Considering the fileSize and the buffer of 4096, we calculate the number of packets to send
        numberPackets = int(sizePackets / 4096)
        numberPackets = numberPackets + 1
        stringPackets = str(numberPackets)
        encodedPackets = stringPackets.encode('utf8')
        s.sendto(encodedPackets, clientAddr)

        check = int(numberPackets)
        fileToSend = open(fileToGet, "rb")

        # Starting to send packets
        while check != 0:
            send = fileToSend.read(4096)
            s.sendto(send, clientAddr)
            count += 1
            check -= 1
            print("Packet number:" + str(count))
        fileToSend.close()
        print("File sent")

    else:
        msg = "Error: File does not exist in Server directory."
        msgEn = msg.encode('utf-8')
        s.sendto(msgEn, clientAddr)
        print("Message Sent.")


# ---------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------


def ServerUpload():
    """
    Function to put files on server. Firstly the file to put will be created on server
    then a connection will be established in order to transfer the required data from
    client's desired file into server

    :except: ConnectionResetError
            Error generated by a connection reset
    :except: Other error
            Other errors generated that will cause the server to shut down
    """

    print("Sending ACK signal to put files.")
    message = "VALID"
    encodedMessage = message.encode('utf-8')
    s.sendto(encodedMessage, clientAddr)
    print("Message Sent to Client.")

    if commandReceived[0] == "upload":

        fileToPut = open(commandReceived[1], "wb")
        packetCounter = 0
        print("Receiving packets will start now.")

        try:
            Count, countaddress = s.recvfrom(4096)  # number of packet
        except ConnectionResetError:
            print("Connection error")
            sys.exit()
        except:
            print("Error")
            sys.exit()

        chunksToReceive = Count.decode('utf8')
        chunks = int(chunksToReceive)

        while chunks != 0:
            ServerData, serverAddr = s.recvfrom(4096)

            fileToPut.write(ServerData)
            packetCounter += 1
            chunks = chunks - 1
            print("Received packet index:" + str(chunks))

        fileToPut.close()
        print("File closed. Check contents in your directory.")


# ---------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------


def ServerElse():
    """
    The function will cause the server to exit, because of unknown commands received
    by client

    :return: quit()
    """

    print("Invalid command...exiting")
    quit()

# ---------------------------------------------------------------------------------------------
#                                   MAIN PART
# ---------------------------------------------------------------------------------------------


"""
Here is where main starts
"""

"""
Declaring host and port
"""
host = "127.0.0.1"
port = 8080

"""

The socket will be initialized  and the error will be dealt from except socket.error
"""

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    print("Server socket initialized")
    s.bind((host, port))
    print("Successful binding. Waiting for Client now.")

except socket.error:
    print("Failed to create socket")
    sys.exit()

time.sleep(3)
"""

This is where the loop starts and we communicate with client calling functions
for every request of the client.
Connection errors will cause the server to exit
"""
while True:
    try:
        data, clientAddr = s.recvfrom(4096)
    except ConnectionResetError:
        print("Connection error")
        sys.exit()

    # commandRecieved will contain the command splitted received by client
    textReceived = data.decode('utf8')
    commandReceived = textReceived.split()

    if commandReceived[0] == "download":
        print("Downloading file")
        Serverdownload(commandReceived[1])
    elif commandReceived[0] == "upload":
        print("Uploading file")
        ServerUpload()
    elif commandReceived[0] == "list":
        print("List of files:")
        ServerList()
    elif commandReceived[0] == "exit":
        ServerExit()
    else:
        ServerElse()