import socket
import time
import os
import sys

# --------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------

def downloadCommand():
    """

    The function gets a file from server. It will receive a signal from server that file exists or not.
    If file exists it create the file requested and it will start to receive data from server. After all
    packets are received the file will be closed. It will practically be just like server when in upload mode

    :except: ConnectionResetError
            Error generated by a connection reset
    """

    print("Waiting for signal to receive")
    try:
        ClientData, clientAddr = s.recvfrom(51200)
    except ConnectionResetError:
        print("Connection error")
        sys.exit()
    except:
        sys.exit()

    response = ClientData.decode('utf8')

    if response == "VALID":
        try:
            ClientData2, clientAddr2 = s.recvfrom(51200)
        except ConnectionResetError:
            print("Connection error")
            sys.exit()
        except:
            sys.exit()

        secondResponse = ClientData2.decode('utf8')
        print(secondResponse)

        if secondResponse == "File exists.":
            fileToGet = open("Received-" + splittedCommand[1], "wb")
            counter = 0
            try:
                CountC, countaddress = s.recvfrom(4096)
            except ConnectionResetError:
                print("Connection error")
                sys.exit()
            except:
                sys.exit()

            chunksNumber = CountC.decode('utf8')
            chunks = int(chunksNumber)
            print("Receiving file if it exists")

            while chunks != 0:
                binData, clientAddr = s.recvfrom(4096)
                data = fileToGet.write(binData)
                counter += 1
                print("Received packet index:" + str(counter))
                chunks -= 1

            fileToGet.close()
            print("File received")


# --------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------

def uploadCommand():
    """
    The function will upload files on server. It will devide the file in chunks and send each one to server
    :except: ConnectionResetError
            Error generated by a connection reset
    """
    print("Waiting for signal to receive")
    try:
        clientData, clientAddr = s.recvfrom(4096)
    except ConnectionResetError:
        print("Connection error")
        sys.exit()
    except:
        sys.exit()

    text = clientData.decode('utf8')
    print(text)
    print("Sending data")

    if text == "VALID":
        if os.path.isfile(splittedCommand[1]):

            counter = 0
            size = os.stat(splittedCommand[1])
            fileSize = size.st_size  # number of packets
            packetsNumber = int(fileSize / 4096)
            packetsNumber += 1
            print("Number of packets to be sent: " + str(packetsNumber))
            packetsToSend = str(packetsNumber)
            encodedPacketNum = packetsToSend.encode('utf8')
            s.sendto(encodedPacketNum, clientAddr)
            sentPackets = int(packetsNumber)

            fileToPut = open(splittedCommand[1], "rb")

            while sentPackets != 0:
                send = fileToPut.read(4096)
                s.sendto(send, clientAddr)
                counter += 1
                sentPackets -= 1
                print("Packet index:" + str(counter))
                print("Data sending in process:")

            fileToPut.close()

            print("Sent from Client")
        else:
            print("File does not exist.")
    else:
        print("Invalid.")


# --------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------

def listCommand():
    """
    The function to receive the list of files from server. It will receive a string with the list of files

    :except: ConnectionResetError
            Error generated by a connection reset
    """

    print("Checking for signal to receive")
    try:
        ClientData, clientAddr = s.recvfrom(51200)
    except ConnectionResetError:
        print("Connection Error")
        sys.exit()
    except:
        sys.exit()

    text = ClientData.decode('utf8')
    print(text)

    if text == "VALID":
        ClientDataL, clientAddrL = s.recvfrom(4096)
        text2 = ClientDataL.decode('utf8')
        print(text2)
    else:
        print("Error. Invalid.")


# --------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------

def exitCommand():
    """
    Exits from client

    :return: quit()
    """
    print("Exiting")
    quit()


# --------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------

def unknownCommand():
    """
    Unknown command sent by user

    :return: quit()
    """

    print("Invalid command...exiting")
    quit()


# --------------------------------------------------------------------------------------------------------------------
#                                       MAIN PART
# --------------------------------------------------------------------------------------------------------------------

host = "127.0.0.1"
port = 8080

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    print("Socket initialized")
except socket.error:
    print("Failed to create socket")
    sys.exit()
time.sleep(3)
while True:
    command = input("Please enter a command as indicated: "
                    "\n1. download *file_name*"
                    "\n2. upload *file_name*"
                    "\n3. list"
                    "\n4. exit\n ")

    commandReceived = command.encode('utf-8')
    try:
        s.sendto(commandReceived, (host, port))
    except ConnectionResetError:
        print("Connection error")
        sys.exit()

    splittedCommand = command.split()
    print("Proceeding")

    if splittedCommand[0] == "download":
        downloadCommand()
    elif splittedCommand[0] == "upload":
        uploadCommand()
    elif splittedCommand[0] == "list":
        listCommand()
    elif splittedCommand[0] == "exit":
        exitCommand()
    else:
        unknownCommand()
